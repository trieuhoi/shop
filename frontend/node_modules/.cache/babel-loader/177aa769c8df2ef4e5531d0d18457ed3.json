{"ast":null,"code":"import axios from 'axios';\nimport { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAIL, REGISTER_USER_REQUEST, REGISTER_USER_SUCCESS, REGISTER_USER_FAIL, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAIL, UPDATE_PROFILE_REQUEST, UPDATE_PROFILE_SUCCESS, UPDATE_PROFILE_FAIL, UPDATE_PASSWORD_REQUEST, UPDATE_PASSWORD_SUCCESS, UPDATE_PASSWORD_FAIL, FORGOT_PASSWORD_REQUEST, FORGOT_PASSWORD_SUCCESS, FORGOT_PASSWORD_FAIL, NEW_PASSWORD_REQUEST, NEW_PASSWORD_SUCCESS, NEW_PASSWORD_FAIL, ALL_USERS_REQUEST, ALL_USERS_SUCCESS, ALL_USERS_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_DETAILS_FAIL, UPDATE_USER_REQUEST, UPDATE_USER_SUCCESS, UPDATE_USER_FAIL, LOGOUT_SUCCESS, LOGOUT_FAIL, CLEAR_ERRORS } from '../constants/userConstants'; // Login\n\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/v1/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Register user\n\nexport const register = userData => async dispatch => {\n  try {\n    dispatch({\n      type: REGISTER_USER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/v1/register', userData, config);\n    dispatch({\n      type: REGISTER_USER_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: REGISTER_USER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Load user\n\nexport const loadUser = () => async dispatch => {\n  try {\n    dispatch({\n      type: LOAD_USER_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/v1/me');\n    dispatch({\n      type: LOAD_USER_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: LOAD_USER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Update profile\n\nexport const updateProfile = userData => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_PROFILE_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    const {\n      data\n    } = await axios.put('/api/v1/me/update', userData, config);\n    dispatch({\n      type: UPDATE_PROFILE_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PROFILE_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Update password\n\nexport const updatePassword = passwords => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_PASSWORD_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put('/api/v1/password/update', passwords, config);\n    dispatch({\n      type: UPDATE_PASSWORD_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PASSWORD_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Forgot password\n\nexport const forgotPassword = email => async dispatch => {\n  try {\n    dispatch({\n      type: FORGOT_PASSWORD_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/v1/password/forgot', email, config);\n    dispatch({\n      type: FORGOT_PASSWORD_SUCCESS,\n      payload: data.message\n    });\n  } catch (error) {\n    dispatch({\n      type: FORGOT_PASSWORD_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Reset password\n\nexport const resetPassword = (token, passwords) => async dispatch => {\n  try {\n    dispatch({\n      type: NEW_PASSWORD_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/v1/password/reset/${token}`, passwords, config);\n    dispatch({\n      type: NEW_PASSWORD_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: NEW_PASSWORD_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Logout user\n\nexport const logout = () => async dispatch => {\n  try {\n    await axios.get('/api/v1/logout');\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGOUT_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Get all users\n\nexport const allUsers = () => async dispatch => {\n  try {\n    dispatch({\n      type: ALL_USERS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/v1/admin/users');\n    dispatch({\n      type: ALL_USERS_SUCCESS,\n      payload: data.users\n    });\n  } catch (error) {\n    dispatch({\n      type: ALL_USERS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Update user - ADMIN\n\nexport const updateUser = (id, userData) => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_USER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/v1/admin/user/${id}`, userData, config);\n    dispatch({\n      type: UPDATE_USER_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_USER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Get user details - ADMIN\n\nexport const getUserDetails = id => async dispatch => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/v1/admin/user/${id}`);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Clear Errors\n\nexport const clearErrors = () => async dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"sources":["C:/Users/Tanh/Music/test/frontend/src/actions/userActions.js"],"names":["axios","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAIL","REGISTER_USER_REQUEST","REGISTER_USER_SUCCESS","REGISTER_USER_FAIL","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAIL","UPDATE_PROFILE_REQUEST","UPDATE_PROFILE_SUCCESS","UPDATE_PROFILE_FAIL","UPDATE_PASSWORD_REQUEST","UPDATE_PASSWORD_SUCCESS","UPDATE_PASSWORD_FAIL","FORGOT_PASSWORD_REQUEST","FORGOT_PASSWORD_SUCCESS","FORGOT_PASSWORD_FAIL","NEW_PASSWORD_REQUEST","NEW_PASSWORD_SUCCESS","NEW_PASSWORD_FAIL","ALL_USERS_REQUEST","ALL_USERS_SUCCESS","ALL_USERS_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL","UPDATE_USER_REQUEST","UPDATE_USER_SUCCESS","UPDATE_USER_FAIL","LOGOUT_SUCCESS","LOGOUT_FAIL","CLEAR_ERRORS","login","email","password","dispatch","type","config","headers","data","post","payload","user","error","response","message","register","userData","loadUser","get","updateProfile","put","success","updatePassword","passwords","forgotPassword","resetPassword","token","logout","allUsers","users","updateUser","id","getUserDetails","clearErrors"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport {\n    LOGIN_REQUEST,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    REGISTER_USER_REQUEST,\n    REGISTER_USER_SUCCESS,\n    REGISTER_USER_FAIL,\n    LOAD_USER_REQUEST,\n    LOAD_USER_SUCCESS,\n    LOAD_USER_FAIL,\n    UPDATE_PROFILE_REQUEST,\n    UPDATE_PROFILE_SUCCESS,\n    UPDATE_PROFILE_FAIL,\n    UPDATE_PASSWORD_REQUEST,\n    UPDATE_PASSWORD_SUCCESS,\n    UPDATE_PASSWORD_FAIL,\n    FORGOT_PASSWORD_REQUEST,\n    FORGOT_PASSWORD_SUCCESS,\n    FORGOT_PASSWORD_FAIL,\n    NEW_PASSWORD_REQUEST,\n    NEW_PASSWORD_SUCCESS,\n    NEW_PASSWORD_FAIL,\n    ALL_USERS_REQUEST,\n    ALL_USERS_SUCCESS,\n    ALL_USERS_FAIL,\n    USER_DETAILS_REQUEST,\n    USER_DETAILS_SUCCESS,\n    USER_DETAILS_FAIL,\n    UPDATE_USER_REQUEST,\n    UPDATE_USER_SUCCESS,\n    UPDATE_USER_FAIL,\n    LOGOUT_SUCCESS,\n    LOGOUT_FAIL,\n    CLEAR_ERRORS\n} from '../constants/userConstants'\n\n// Login\nexport const login = (email, password) => async (dispatch) => {\n    try {\n\n        dispatch({ type: LOGIN_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.post('/api/v1/login', { email, password }, config)\n\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: data.user\n        })\n\n    } catch (error) {\n        dispatch({\n            type: LOGIN_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Register user\nexport const register = (userData) => async (dispatch) => {\n    try {\n\n        dispatch({ type: REGISTER_USER_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        }\n\n        const { data } = await axios.post('/api/v1/register', userData, config)\n\n        dispatch({\n            type: REGISTER_USER_SUCCESS,\n            payload: data.user\n        })\n\n    } catch (error) {\n        dispatch({\n            type: REGISTER_USER_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Load user\nexport const loadUser = () => async (dispatch) => {\n    try {\n\n        dispatch({ type: LOAD_USER_REQUEST })\n\n        const { data } = await axios.get('/api/v1/me')\n\n        dispatch({\n            type: LOAD_USER_SUCCESS,\n            payload: data.user\n        })\n\n    } catch (error) {\n        dispatch({\n            type: LOAD_USER_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Update profile\nexport const updateProfile = (userData) => async (dispatch) => {\n    try {\n\n        dispatch({ type: UPDATE_PROFILE_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        }\n\n        const { data } = await axios.put('/api/v1/me/update', userData, config)\n\n        dispatch({\n            type: UPDATE_PROFILE_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: UPDATE_PROFILE_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Update password\nexport const updatePassword = (passwords) => async (dispatch) => {\n    try {\n\n        dispatch({ type: UPDATE_PASSWORD_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.put('/api/v1/password/update', passwords, config)\n\n        dispatch({\n            type: UPDATE_PASSWORD_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: UPDATE_PASSWORD_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Forgot password\nexport const forgotPassword = (email) => async (dispatch) => {\n    try {\n\n        dispatch({ type: FORGOT_PASSWORD_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.post('/api/v1/password/forgot', email, config)\n\n        dispatch({\n            type: FORGOT_PASSWORD_SUCCESS,\n            payload: data.message\n        })\n\n    } catch (error) {\n        dispatch({\n            type: FORGOT_PASSWORD_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Reset password\nexport const resetPassword = (token, passwords) => async (dispatch) => {\n    try {\n\n        dispatch({ type: NEW_PASSWORD_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.put(`/api/v1/password/reset/${token}`, passwords, config)\n\n        dispatch({\n            type: NEW_PASSWORD_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: NEW_PASSWORD_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Logout user\nexport const logout = () => async (dispatch) => {\n    try {\n\n        await axios.get('/api/v1/logout')\n\n        dispatch({\n            type: LOGOUT_SUCCESS,\n        })\n\n    } catch (error) {\n        dispatch({\n            type: LOGOUT_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Get all users\nexport const allUsers = () => async (dispatch) => {\n    try {\n\n        dispatch({ type: ALL_USERS_REQUEST })\n\n        const { data } = await axios.get('/api/v1/admin/users')\n\n        dispatch({\n            type: ALL_USERS_SUCCESS,\n            payload: data.users\n        })\n\n    } catch (error) {\n        dispatch({\n            type: ALL_USERS_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Update user - ADMIN\nexport const updateUser = (id, userData) => async (dispatch) => {\n    try {\n\n        dispatch({ type: UPDATE_USER_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.put(`/api/v1/admin/user/${id}`, userData, config)\n\n        dispatch({\n            type: UPDATE_USER_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: UPDATE_USER_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Get user details - ADMIN\nexport const getUserDetails = (id) => async (dispatch) => {\n    try {\n\n        dispatch({ type: USER_DETAILS_REQUEST })\n\n\n        const { data } = await axios.get(`/api/v1/admin/user/${id}`)\n\n        dispatch({\n            type: USER_DETAILS_SUCCESS,\n            payload: data.user\n        })\n\n    } catch (error) {\n        dispatch({\n            type: USER_DETAILS_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n\n\n\n// Clear Errors\nexport const clearErrors = () => async (dispatch) => {\n    dispatch({\n        type: CLEAR_ERRORS\n    })\n}"]},"metadata":{},"sourceType":"module"}